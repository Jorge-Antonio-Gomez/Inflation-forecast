tail(df_forecast)
tail(outSample)
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 4))
outSample <- window(ts_inflation, start = c(2022, 5))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 1:24) {
inSample <- window(ts_inflation, end = c(2022, 2 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 3), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
theme_minimal()
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 4))
outSample <- window(ts_inflation, start = c(2022, 5))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 1:24) {
inSample <- window(ts_inflation, end = c(2022, 4 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 3), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
theme_minimal()
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 4))
outSample <- window(ts_inflation, start = c(2022, 5))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 1:24) {
inSample <- window(ts_inflation, end = c(2022, 2 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 3), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 4))
outSample <- window(ts_inflation, start = c(2022, 5))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 0:24) {
inSample <- window(ts_inflation, end = c(2022, 4 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 3), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
forecast_arima_2
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
theme_minimal()
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 4))
outSample <- window(ts_inflation, start = c(2022, 5))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 1:24) {
inSample <- window(ts_inflation, end = c(2022, 4 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 3), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
inSample <- window(ts_inflation, end = c(2022, 3))
outSample <- window(ts_inflation, start = c(2022, 4))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 1:24) {
inSample <- window(ts_inflation, end = c(2022, 4 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
inSample <- window(ts_inflation, end = c(2022, 3 + i))
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 3))
outSample <- window(ts_inflation, start = c(2022, 4))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 1:24) {
inSample <- window(ts_inflation, end = c(2022, 3 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 3), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 3))
outSample <- window(ts_inflation, start = c(2022, 4))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 1:24) {
inSample <- window(ts_inflation, end = c(2022, 3 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 3), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 1:24) {
inSample <- window(ts_inflation, end = c(2022, 3 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 3))
outSample <- window(ts_inflation, start = c(2022, 4))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 24)
for (i in 1:24) {
inSample <- window(ts_inflation, end = c(2022, 3 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 4), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
theme_minimal()
df_forecast
outSample
length(outSample)
length(forecast_arima_2)
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 3))
outSample <- window(ts_inflation, start = c(2022, 4))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 25)
for (i in 1:25) {
inSample <- window(ts_inflation, end = c(2022, 3 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 4), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
theme_minimal()
length(outSample)
length(forecast_arima_2)
# Forecast de abril de 2024:
forecast_arima_2[13]
forecast_arima_2
# Forecast de abril de 2024:
forecast_arima_2[25]
forecast_arima_2
# Forecast de abril de 2024:
forecast_arima_2[-1]
forecast_arima_2
# Forecast de abril de 2024:
forecast_arima_2[24]
# Forecast de abril de 2024:
forecast_arima_2[25]
outSampleExpectation <- window(df, start = c(2022, 4))
ts_expect_t <- ts(df$expect_t, start = c(1999, 1), frequency = 12)
outSampleExpectation <- window(ts_expect_t, start = c(2022, 4))
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
geom_point(data = outSampleExpectation, aes(x = time, y = outSampleExpectation), color = "black", linestyle = "dashed") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
theme_minimal()
length(outSample)
length(forecast_arima_2)
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
geom_point(data = outSampleExpectation, aes(x = time, y = outSampleExpectation), color = "black", linetype = "dashed") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
theme_minimal()
length(outSample)
length(forecast_arima_2)
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
geom_point(data = outSampleExpectation, aes(x = time, y = outSampleExpectation), color = "gray", linetype = "dashed") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
theme_minimal()
length(outSample)
length(forecast_arima_2)
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
geom_line(data = outSampleExpectation, aes(x = time, y = outSampleExpectation), color = "gray", linetype = "dashed") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
theme_minimal()
length(outSample)
length(forecast_arima_2)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
geom_line(data = outSampleExpectation, aes(x = time, y = outSampleExpectation), color = "gray", linetype = "dashed") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
# Un cuadro que identificada el color de cada línea:
scale_color_manual(values = c("black", "brown", "gray")) +
theme_minimal()
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
geom_line(data = outSampleExpectation, aes(x = time, y = outSampleExpectation), color = "gray", linetype = "dashed") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
# Un cuadro que identificada el color de cada línea:
scale_color_manual(values = c("black", "brown", "gray")) +
theme_minimal()
length(outSample)
length(forecast_arima_2)
# Data frame with expect_t e inflation:
df <- data.frame(data$fecha, data$expect_t, data$inflation, data$expect_t1)
colnames(df) <- c("fecha", "expect_t", "inflation", "expect_t1")
tail(df)
ts_expect_t1 <- ts(df$expect_t1, start = c(1999, 1), frequency = 12)
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12), xreg = ts_expect)
# Convertir a serie de tiempo con fechas:
ts_inflation <- ts(df$inflation, start = c(1999, 1), frequency = 12)
ts_expect_t <- ts(df$expect_t, start = c(1999, 1), frequency = 12)
ts_expect_t1 <- ts(df$expect_t1, start = c(1999, 1), frequency = 12)
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12), xreg = ts_expect_t)
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 25)
for (i in 1:25) {
inSample <- window(ts_inflation, end = c(2022, 3 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 4), frequency = 12)
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
geom_line(data = outSampleExpectation, aes(x = time, y = outSampleExpectation), color = "gray", linetype = "dashed") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
# Un cuadro que identificada el color de cada línea:
scale_color_manual(values = c("black", "brown", "gray")) +
theme_minimal()
length(outSample)
length(forecast_arima_2)
forecast_arima_2
outSample
# RMSFE del forecast:
RMSFE_arima_2 <- sqrt(mean((outSample - forecast_arima_2)^2))
forecast_arima_2
outSample
# Quitar último elemento de forecast_arima_2:
forecast_arima_2 <- window(forecast_arima_2, end = c(2024, 3))
forecast_arima_2
outSample <- window(ts_inflation, start = c(2022, 4)
outSampleExpectation <- window(ts_expect_t, start = c(2022, 4))
outSample <- window(ts_inflation, start = c(2022, 4)
outSample <- window(ts_inflation, start = c(2022, 4)
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 3))
outSample <- window(ts_inflation, start = c(2022, 4)
outSampleExpectation <- window(ts_expect_t, start = c(2022, 4))
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 3))
outSample <- window(ts_inflation, start = c(2022, 4))
outSampleExpectation <- window(ts_expect_t, start = c(2022, 4))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12), xreg = ts_expect_t)
# Create subSamples:
inSample <- window(ts_inflation, end = c(2022, 3))
outSample <- window(ts_inflation, start = c(2022, 4))
outSampleExpectation <- window(ts_expect_t, start = c(2022, 4))
# ARIMA(2,0,0)[12]:
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
# Forecast one step ahead:
# forecast_arima_2 <- forecast(model_arima_2, h = 24)
# forecast_arima_2
# Integrate the observed to the inSample:
forecast_arima_2 <- rep(NA, 25)
for (i in 1:25) {
inSample <- window(ts_inflation, end = c(2022, 3 + i))
model_arima_2 <- Arima(inSample, order = c(2,0,0), seasonal = list(order = c(0,0,0), period = 12))
forecast_arima_2[i] <- forecast(model_arima_2, h = 1)$mean
}
forecast_arima_2 <- ts(forecast_arima_2, start = c(2022, 4), frequency = 12)
# lower95 = 4° col
# upper95 = 5° col
# df_forecast <- data.frame(time = time(forecast_arima_2$mean), forecast_arima_2$mean, forecast_arima_2$lower[, 2], forecast_arima_2$upper[, 2])
df_forecast <- data.frame(time = time(forecast_arima_2), forecast_arima_2)
colnames(df_forecast) <- c("time", "forecast_arima_2")
tail(df_forecast)
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- time(outSample)
ggplot() +
geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2), color = "brown", linetype = "dashed") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$lower[ ,2]), color = "red") +
# geom_line(data = df_forecast, aes(x = time, y = forecast_arima_2$upper[ ,2]), color = "red") +
geom_line(data = outSample, aes(x = time, y = outSample), color = "black") +
geom_line(data = outSampleExpectation, aes(x = time, y = outSampleExpectation), color = "gray", linetype = "dashed") +
labs(title = "ARIMA(2,0,0)[12] Forecasting", x = "Time", y = "Inflation") +
# 1 to 1 month in x:
# scale_x_continuous(breaks = seq(2022, 2024, 1)) +
# Un cuadro que identificada el color de cada línea:
scale_color_manual(values = c("black", "brown", "gray")) +
theme_minimal()
length(outSample)
length(forecast_arima_2)
# Quitar último elemento de forecast_arima_2:
forecast_arima_2 <- window(forecast_arima_2, end = c(2024, 3))
cbind(length(outSample), length(forecast_arima_2)))
# Quitar último elemento de forecast_arima_2:
forecast_arima_2 <- window(forecast_arima_2, end = c(2024, 3))
cbind(length(outSample), length(forecast_arima_2))
# RMSFE del forecast:
RMSFE_arima_2 <- sqrt(mean((outSample - forecast_arima_2)^2))
RMSFE_expectation <- sqrt(mean((outSample - outSampleExpectation)^2))
outSample
# Quitar último elemento (abr 2024):
outSample <- window(outSample, end = c(2024, 3))
forecast_arima_2 <- window(forecast_arima_2, end = c(2024, 3))
cbind(length(outSample), length(forecast_arima_2))
outSampleExpectation
outSampleExpectation <- window(outSampleExpectation, end = c(2024, 3))
cbind(length(outSample), length(forecast_arima_2), length(outSampleExpectation))
rmsfe_df <- data.frame(RMSFE_arima_2, RMSFE_expectation)
rmsfe_df
outSample
outSampleExpectation
outSample
outSample - outSampleExpectation
RMSFE_expectation <- sqrt(mean((outSample - outSampleExpectation)^2))
RMSFE_expectation
rmsfe_df <- data.frame(RMSFE_arima_2, RMSFE_expectation)
rmsfe_df
