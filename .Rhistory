exchange_rate$fecha <- paste0(exchange_rate$fecha, "-01")
# Formato de fecha:
exchange_rate$fecha <- as.Date(exchange_rate$fecha, format = "%Y-%m-%d")
# Cortar datos desde start_year:
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 4)) >= start_year)
# Cortar datos hasta currentMonth
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 7)) <= as.numeric(paste0(currentYear, "-", last_month)))
# Cortar datos hasta currentMonth
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 7)) <= as.numeric(paste0(currentYear, "-", last_month)))
exchange_rate$exchange_rate
exchange_rate
exchange_rate
# Tipo de cambio .csv:
exchange_rate <- read.csv("mxn.csv")
# Delete first column:
exchange_rate <- exchange_rate[, -1]
# Rename:
colnames(exchange_rate) <- c("fecha", "exchange_rate")
# Date is as YYYY/MM. Now we will put as YYYY/MM/DD:
exchange_rate$fecha <- paste0(exchange_rate$fecha, "-01")
exchange_rate
# Formato de fecha:
exchange_rate$fecha <- as.Date(exchange_rate$fecha, format = "%Y-%m-%d")
# Cortar datos desde start_year:
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 4)) >= start_year)
# Cortar datos hasta currentMonth
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 7)) <= as.numeric(paste0(currentYear, "-", last_month)))
exchange_rate
# Tipo de cambio .csv:
exchange_rate <- read.csv("mxn.csv")
# Delete first column:
exchange_rate <- exchange_rate[, -1]
# Rename:
colnames(exchange_rate) <- c("fecha", "exchange_rate")
# Date is as YYYY/MM. Now we will put as YYYY/MM/DD:
exchange_rate$fecha <- paste0(exchange_rate$fecha, "-01")
# Formato de fecha:
exchange_rate$fecha <- as.Date(exchange_rate$fecha, format = "%Y-%m-%d")
exchange_rate
# Cortar datos desde start_year:
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 4)) >= start_year)
exchange_rate
currentYear, "-", last_month)
currentYear
paste0(currentYear, "-", last_month)
# Cortar datos hasta currentMonth
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 7)) <= as.numeric(paste0(currentYear, "-", last_month)))
as.numeric(paste0(currentYear, "-", last_month))
# Cortar datos hasta currentMonth
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 7)) <= paste0(currentYear, "-", last_month))
exchange_rate
# Tipo de cambio .csv:
exchange_rate <- read.csv("mxn.csv")
# Delete first column:
exchange_rate <- exchange_rate[, -1]
# Delete first column:
exchange_rate <- exchange_rate[, -1]
# Rename:
colnames(exchange_rate) <- c("fecha", "exchange_rate")
# Date is as YYYY/MM. Now we will put as YYYY/MM/DD:
exchange_rate$fecha <- paste0(exchange_rate$fecha, "-01")
# Formato de fecha:
exchange_rate$fecha <- as.Date(exchange_rate$fecha, format = "%Y-%m-%d")
# Tipo de cambio .csv:
exchange_rate <- read.csv("mxn.csv")
# Delete first column:
exchange_rate <- exchange_rate[, -1]
# Rename:
colnames(exchange_rate) <- c("fecha", "exchange_rate")
# Date is as YYYY/MM. Now we will put as YYYY/MM/DD:
exchange_rate$fecha <- paste0(exchange_rate$fecha, "-01")
# Formato de fecha:
exchange_rate$fecha <- as.Date(exchange_rate$fecha, format = "%Y-%m-%d")
# Cortar datos desde start_year:
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 4)) >= start_year)
# Cortar datos hasta currentMonth
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 7)) <= paste0(currentYear, "-", last_month))
exchange_rate
# Tipo de cambio .csv:
exchange_rate <- read.csv("mxn.csv")
# Delete first column:
exchange_rate <- exchange_rate[, -1]
# Rename:
colnames(exchange_rate) <- c("fecha", "exchange_rate")
# Date is as YYYY/MM. Now we will put as YYYY/MM/DD:
exchange_rate$fecha <- paste0(exchange_rate$fecha, "-01")
# Formato de fecha:
exchange_rate$fecha <- as.Date(exchange_rate$fecha, format = "%Y-%m-%d")
# Cortar datos desde start_year:
exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 4)) >= start_year)
# Cortar datos hasta currentMonth (hasta 2024-04:
# exchange_rate <- filter(exchange_rate, as.numeric(substr(fecha, 1, 7))
# diff_exchange_rate:
exchange_rate$diff_exchange_rate <- c(NA, diff(exchange_rate$exchange_rate))
# Lag de diff_exchange_rate:
exchange_rate$diff_exchange_rate_lag <- c(NA, exchange_rate$diff_exchange_rate[1:dim(exchange_rate)[1]-1])
# Integrar a df:
df$exchange_rate <- exchange_rate$exchange_rate
df$diff_exchange_rate <- exchange_rate$diff_exchange_rate
df$diff_exchange_rate_lag <- exchange_rate$diff_exchange_rate_lag
df$exchange_rate
df
exchange_rate
# Inflation lag:
df$inflation_lag <- c(NA, df$inflation[1:dim(df)[1]-1])
df$inflation_lag6 <- c(rep(NA, 6), df$inflation[6:dim(df)[1]-6])
df$inflation_lag12 <- c(rep(NA, 12), df$inflation[12:dim(df)[1]-12])
df$inflation_lag18 <- c(rep(NA, 18), df$inflation[18:dim(df)[1]-18])
df$inflation_lag24 <- c(rep(NA, 24), df$inflation[24:dim(df)[1]-24])
# Crear dummies:
df$month <- as.numeric(format(df$fecha, "%m"))
# Crear dummies:
for (i in 1:12) {
dummy <- paste0("D_", i)
df[dummy] <- ifelse(df$month == i, 1, 0)
assign(paste0("D_", i), df[dummy], envir = .GlobalEnv)
}
nrow(df)
head(df)
# marianoDieboldError <- rep(NA, 2)
# IN FUNCTION ARIMA:
# serie: i.e. ts_inflation  (Time series data)
# modelname: i.e. arima_2   (Name of the model)
# order: i.e. c(2,0,0)      (ARIMA order)
# outSampleSize: i.e. 24    (Tamaño de la muestra de validación)
# period: i.e. 12           (1 if you don't want deterministic seasonality)
# h: i.e. 1                 (1 if you want to forecast one step ahead)
iterate_forecast <- function(serie, model_name, order, period, outSampleSize, h) {
# Number of forecasts:
nfcast <- outSampleSize + h
# Start year of the forecast (using nfcast):
lastMonth <- end(serie)[2]
startYearToFcast <- floor(currentYear + ((lastMonth)/12) - ((outSampleSize)/12) )
start_month_index <- lastMonth - (outSampleSize %% 12)
end_month_index <- start_month_index - 1
if (start_month_index <= 0) {
start_month_index <- 12 + start_month_index
# end_month_index <- start_month_index - 1
startYearToFcast <- startYearToFcast - 1
}
# Create a vector to save the forecast:
forecast_vector <- rep(NA, nfcast)
forecast_Li <- rep(NA, nfcast)
forecast_Ui <- rep(NA, nfcast)
# Cicle
for (i in 1:nfcast) {
# print(paste0("Final de la in-Sample: c(", startYearToFcast, ", ", end_month_index - h + i, ")"))
# For a time series uncomment:
inSample <- window(serie, end = c(startYearToFcast, end_month_index - h + i))
# Model: To use an ARIMA:
model <- Arima(inSample, order = order, seasonal = list(order = c(0,0,0), period = period))
forecast <- forecast(model, h = h, level = 0.90)
forecast_vector[i] <- forecast$mean
forecast_Li[i] <- forecast$lower
forecast_Ui[i] <- forecast$upper
# print(forecast_vector[i])
# Test de autocorrelación
if (i == nfcast) {
test <- Box.test(model$residuals, type = "Ljung-Box")
print(paste0("test de Ljung-Box: ", test$p.value))
# ACF de los residuales
# acf(model$residuals, lag.max = 24)
print(" ------------------------------------------ ")
}
}
# export intervals:
forecast_Li <- data.frame(Date, forecast_Li)
forecast_Ui <- data.frame(forecast_Ui)
forecast_intervals <- cbind(forecast_Li, forecast_Ui)
# assign(paste0("forecast__Li"), forecast_Li, envir = .GlobalEnv)
# assign(paste0("forecast__Ui"), forecast_Ui, envir = .GlobalEnv)
assign(paste0("forecast_intervals"), forecast_intervals, envir = .GlobalEnv)
# Date of the out-of-sample:
Date <- seq(as.Date(paste0(startYearToFcast, "-", end_month_index + 1, "-01")), by = "month", length.out = nfcast)
assign("Date", Date, envir = .GlobalEnv)
# convert `forecast_vector` to a time series:
forecast_vector <- ts(forecast_vector, start = c(startYearToFcast, end_month_index + 1), frequency = 12)
# Create a data frame with the forecast:
assign(paste0("forecast_", model_name), forecast_vector, envir = .GlobalEnv)
# Creación de un outSample_observed y un outSample_expected and declare them as global variables:
assign("outSample_observed", window(serie, start = c(startYearToFcast, end_month_index + 1)), envir = .GlobalEnv)
assign("outSample_expected", window(ts_expect_t, start = c(startYearToFcast, end_month_index + 1)), envir = .GlobalEnv)
# RMSFE:
# RMSFE <- sqrt(mean((outSample_observed - forecast_vector)^2))
RMSFE <- sqrt(mean((na.omit(as.vector(outSample_observed)) - na.omit(forecast_vector[1:outSampleSize]))^2))
print(paste0("RMSFE del modelo: ", round(RMSFE, 4)))
print(" ------------------------------------------ ")
# Mariano Diebold test:
marianoDieboldError <- c(rep(NA, outSampleSize))
# marianoDieboldError <- as.vector(na.omit(as.vector(outSample_observed)) - na.omit(forecast_vector[1:outSampleSize]))
for (i in 1:outSampleSize) {
marianoDieboldError[i] <- na.omit(as.vector(outSample_observed))[i] - na.omit(forecast_vector[1:outSampleSize])[i]
}
assign("marianoDieboldError_2", marianoDieboldError, envir = .GlobalEnv)
# print(paste0("Mariano Diebold error: ", marianoDieboldError))
# print(" ------------------------------------------ ")
# To show last forecast:
print(paste0("Forecast de abril de 2024: ", round(forecast_vector[nfcast], 3)))
# Intervalos de confianza en cbind:
print(paste0("Límite superior del pronóstico: ", round(forecast_intervals$forecast_Ui[nfcast], 3)))
print(paste0("Límite inferior del pronóstico: ", round(forecast_intervals$forecast_Li[nfcast], 3)))
print(" ------------------------------------------ ")
# print observed data:
# print("Datos observados:")
# print(paste0("outSample_observed: ", outSample_observed))
# print(" ------------------------------------------ ")
print("Datos del forecast:")
return(forecast_vector)
# El output es una serie de tiempo con las predicciones llamada forecast_"model_name", donde "model_name" es el nombre del modelo.
}
# outSample_expected
# IN FUNCTION LINEAR MODEL:
# df: i.e. ts_inflation  (Time series data) (data frame)
# modelname: i.e. arima_2   (Name of the model)
# outSampleSize: i.e. 24    (Tamaño de la muestra de validación)
iterate_forecast_linear <- function(df, model_name, outSampleSize) {
h <- 1
# Number of forecasts:
nfcast <- outSampleSize + h
# Start year of the forecast (using nfcast):
lastMonth <- as.numeric(format(df$fecha[dim(df)[1]], "%m"))
startYearToFcast <- floor(currentYear + ((lastMonth)/12) - ((outSampleSize)/12) )
start_month_index <- lastMonth - (outSampleSize %% 12)
end_month_index <- start_month_index - 1
if (start_month_index <= 0) {
start_month_index <- 12 + start_month_index
# end_month_index <- start_month_index - 1
startYearToFcast <- startYearToFcast - 1
}
# Create a vector to save the forecast:
forecast_vector <- rep(NA, nfcast)
forecast_Li <- rep(NA, nfcast)
forecast_Ui <- rep(NA, nfcast)
# Cicle
for (i in 1:nfcast) {
# print(paste0("Final de la in-Sample: c(", startYearToFcast, ", ", end_month_index - h + i, ")"))
# For a time series uncomment:
# inSample <- window(serie, end = c(startYearToFcast, end_month_index - h + i))
# For a data frame uncomment:
inSamplePlus <- filter(df, as.numeric(format(fecha, "%Y")) <= startYearToFcast)
inSample <- inSamplePlus[1:(length(inSamplePlus[,1]) - 12 + end_month_index - h + i),]
# inSamplePlus <- filter(df, as.numeric(format(fecha, "%Y")) <= 2022)
# inSample <- inSamplePlus[1:(length(inSamplePlus[,1]) - 12 + 3),]
# Model: To use a linear model:
# model <- lm(inflation ~ cetes28 + cetes28_lag, data = inSample)
# model <- lm(inflation ~ inflation_lag + inflation_lag12 + inflation_lag24 + cetes28 + cetes28_lag, data = inSample)
# model <- lm(inflation ~ inflation_lag + inflation_lag12 + inflation_lag24 + expect_t, data = inSample)
# model <- auto.arima(inSample$inflation, xreg = inSample$expect_t, seasonal = TRUE)
model <- modelFn(inSample)
# summary(model)
df_forecast <- df[length(inSample[,1])+1,]
# forecast <- forecast(model, h = h, level = 0.90, newdata = df_forecast)
#
forecast_expect <- matrix(data = df_forecast$expect_t, ncol = 1)
# forecast <- forecast(model, xreg = forecast_expect, h = h, level = 0.90)
forecast <- forecast(model, h = h, level = 0.90, newdata = df_forecast)
forecast_vector[i] <- forecast$mean
forecast_Li[i] <- forecast$lower
forecast_Ui[i] <- forecast$upper
# print(forecast_vector[i])
if (i == nfcast) {
boxTest <- Box.test(model$residuals, type = "Ljung-Box")
# print box test:
print(paste0("Box.test p-value: ", boxTest$p.value))
}
}
# Date of the out-of-sample:
Date <- seq(as.Date(paste0(startYearToFcast, "-", end_month_index + 1, "-01")), by = "month", length.out = nfcast)
assign("Date", Date, envir = .GlobalEnv)
# convert `forecast_vector` to a time series:
forecast_vector <- ts(forecast_vector, start = c(startYearToFcast, end_month_index + 1), frequency = 12)
# assign("forecast_vector", forecast_vector, envir = .GlobalEnv)
# export intervals:
forecast_Li <- data.frame(Date, forecast_Li)
forecast_Ui <- data.frame(forecast_Ui)
forecast_intervals <- cbind(forecast_Li, forecast_Ui)
# assign(paste0("forecast__Li"), forecast_Li, envir = .GlobalEnv)
# assign(paste0("forecast__Ui"), forecast_Ui, envir = .GlobalEnv)
assign(paste0("forecast_intervals"), forecast_intervals, envir = .GlobalEnv)
# export forecasts:
assign(paste0("forecast_", model_name), forecast_vector, envir = .GlobalEnv)
# Creación del outSample global:
outSample <- df[(length(df[,1]) - outSampleSize):length(df[,1]),]
assign("outSample", outSample, envir = .GlobalEnv)
# Creación de un outSample_observed y un outSample_expected and declare them as global variables:
# assign("outSample_observed", window(serie, start = c(startYearToFcast, end_month_index + 1)), envir = .GlobalEnv)
# In df:
outSample_observed <- outSample$inflation
assign("outSample_observed", outSample_observed, envir = .GlobalEnv)
# assign("outSample_expected", window(ts_expect_t, start = c(startYearToFcast, end_month_index + 1)), envir = .GlobalEnv)
# In df:
outSample_expected <- outSample$expect_t
assign("outSample_expected", outSample_expected, envir = .GlobalEnv)
# RMSFE:
# RMSFE <- sqrt(mean((outSample_observed - forecast_vector)^2))
# print(paste0("length of na.omit(outSample_observed) = ", length(na.omit(outSample_observed))))
# assign("outSample_observed", outSample_observed, envir = .GlobalEnv)
# print(paste0("length of forecast_vector[1:", outSampleSize, "] = ", length(forecast_vector[1:outSampleSize])))
# assign("forecast_vector", forecast_vector, envir = .GlobalEnv)
RMSFE <- sqrt( mean( (na.omit(outSample_observed) - forecast_vector[1:outSampleSize] )^2))
print(paste0("RMSFE del modelo: ", round(RMSFE, 4)))
# To show last forecast:
print(paste0("Forecast de abril de 2024: ", round(forecast_vector[nfcast], 3)))
# Intervalos de confianza en cbind:
print(paste0("Límite superior del pronóstico: ", round(forecast_intervals$forecast_Ui[nfcast], 3)))
print(paste0("Límite inferior del pronóstico: ", round(forecast_intervals$forecast_Li[nfcast], 3)))
print("------------------------------------------")
# return(forecast_vector)
# print("Datos del forecast:")
# print(forecast_vector)
# print(" ------------------------------------------ ")
# return(summary(model))
print("Datos del modelo:")
print(summary(model))
print(" ------------------------------------------ ")
# export checkresiduals as pdf:
pdf("checkresiduals.pdf", height = 5, width = 10)
print(checkresiduals(model))
dev.off()
# Mariano Diebold test:
marianoDieboldError <- c(rep(NA, outSampleSize))
# marianoDieboldError <- as.vector(na.omit(as.vector(outSample_observed)) - na.omit(forecast_vector[1:outSampleSize]))
for (i in 1:outSampleSize) {
marianoDieboldError[i] <- na.omit(as.vector(outSample_observed))[i] - na.omit(forecast_vector[1:outSampleSize])[i]
}
assign("marianoDieboldError_1", marianoDieboldError, envir = .GlobalEnv)
# print(paste0("Mariano Diebold error: ", marianoDieboldError))
# print(" ------------------------------------------ ")
# print observed data:
# print("Datos observados:")
# print(paste0("outSample_observed: ", outSample_observed))
# print(" ------------------------------------------ ")
print("Datos del forecast:")
return(forecast_vector)
}
# outSample_expected
df$cetes28
lag(cetes28, 1)
diff(cetes28, 1)
diff(cetes28)
diff(df$cetes28)
diff(df$cetes28,1)
diff(df$cetes28, 1)
# LINEAR MODEL
modelFn <- function(dataset) {
model <- lm(inflation ~ inflation_lag + inflation_lag12 + inflation_lag24 + expect_t1 + exchange_rate + diff(cetes_28, 1), data = dataset)
assign("model", model, envir = .GlobalEnv)
return(model)
}
diff(df$cetes28, 1)
diff(df$cetes_28)
# LINEAR MODEL
iterate_forecast_linear(df, "model", 24)
df
diff(df$cetes28)
# LINEAR MODEL
modelFn <- function(dataset) {
model <- lm(inflation ~ inflation_lag + inflation_lag12 + inflation_lag24 + expect_t1 + exchange_rate + diff(cetes28, 1), data = dataset)
assign("model", model, envir = .GlobalEnv)
return(model)
}
# diff(df$cetes28, 1)
#
# diff(df$cetes28)
# df
# LINEAR MODEL
iterate_forecast_linear(df, "model", 24)
# LINEAR MODEL
modelFn <- function(dataset) {
model <- lm(inflation ~ inflation_lag + inflation_lag12 + inflation_lag24 + expect_t1 + exchange_rate + c(NA, diff(cetes28, 1)), data = dataset)
assign("model", model, envir = .GlobalEnv)
return(model)
}
# diff(df$cetes28, 1)
#
# diff(df$cetes28)
# df
# LINEAR MODEL
iterate_forecast_linear(df, "model", 24)
forecast_1 <- forecast_model
# forecast_intervals
# Cetes a 28 días .csv:
cetes28_daily <- read.csv("cetes_28.csv")
colnames(cetes28_daily) <- c("fecha", "cetes28")
# Fecha a formato de fecha:
cetes28_daily$fecha <- as.Date(cetes28_daily$fecha, format = "%d/%m/%Y")
# To monthly data (monthly mean):
# cetes28 <- aggregate(cetes28_daily[,2], by = list(format(cetes28_daily$fecha, "%Y-%m")), FUN = mean)
# To monthly data (monthly last value):
cetes28 <- aggregate(cetes28_daily[,2], by = list(format(cetes28_daily$fecha, "%Y-%m")), FUN = tail, n = 1)
# Cortar datos desde currentYear:
cetes28 <- filter(cetes28, as.numeric(substr(Group.1, 1, 4)) >= start_year)
colnames(cetes28) <- c("fecha", "cetes28")
# Cortar datos hasta currentMonth
cetes28 <- filter(cetes28, as.numeric(substr(fecha, 1, 4)) < currentYear | as.numeric(substr(fecha, 6, 7)) <= last_month)
# diff_cetes28
cetes28$diff_cetes28 <- c(NA, diff(cetes28$cetes28))
# Lag de diff_cetes28:
cetes28$diff_cetes28_lag <- c(NA, cetes28$diff_cetes28[1:dim(cetes28)[1]-1])
# Integrar a df:
df$cetes28 <- cetes28$cetes28
# Integrar cetes28_lag:
df$cetes28_lag <- c(NA, df$cetes28[1:dim(df)[1]-1])
# Cetes a 28 días .csv:
cetes28_daily <- read.csv("cetes_28.csv")
colnames(cetes28_daily) <- c("fecha", "cetes28")
# Fecha a formato de fecha:
cetes28_daily$fecha <- as.Date(cetes28_daily$fecha, format = "%d/%m/%Y")
# To monthly data (monthly mean):
# cetes28 <- aggregate(cetes28_daily[,2], by = list(format(cetes28_daily$fecha, "%Y-%m")), FUN = mean)
# To monthly data (monthly last value):
cetes28 <- aggregate(cetes28_daily[,2], by = list(format(cetes28_daily$fecha, "%Y-%m")), FUN = tail, n = 1)
# Cortar datos desde currentYear:
cetes28 <- filter(cetes28, as.numeric(substr(Group.1, 1, 4)) >= start_year)
colnames(cetes28) <- c("fecha", "cetes28")
# Cortar datos hasta currentMonth
cetes28 <- filter(cetes28, as.numeric(substr(fecha, 1, 4)) < currentYear | as.numeric(substr(fecha, 6, 7)) <= last_month)
# diff_cetes28
cetes28$diff_cetes28 <- c(NA, diff(cetes28$cetes28))
# Lag de diff_cetes28:
cetes28$diff_cetes28_lag <- c(NA, cetes28$diff_cetes28[1:dim(cetes28)[1]-1])
# Integrar a df:
df$cetes28 <- cetes28$cetes28
df$diff_cetes28 <- cetes28$diff_cetes28
df$diff_cetes28_lag <- cetes28$diff_cetes28_lag
# Integrar cetes28_lag:
df$cetes28_lag <- c(NA, df$cetes28[1:dim(df)[1]-1])
# LINEAR MODEL
modelFn <- function(dataset) {
model <- lm(inflation ~ inflation_lag + inflation_lag12 + inflation_lag24 + expect_t1 + exchange_rate + diff_cetes28, data = dataset)
assign("model", model, envir = .GlobalEnv)
return(model)
}
# diff(df$cetes28, 1)
#
# diff(df$cetes28)
# df
# LINEAR MODEL
iterate_forecast_linear(df, "model", 24)
forecast_1 <- forecast_model
# forecast_intervals
# LINEAR MODEL
modelFn <- function(dataset) {
model <- lm(inflation ~ inflation_lag + inflation_lag12 + inflation_lag24 + expect_t1 + exchange_rate + diff_cetes28_lag, data = dataset)
assign("model", model, envir = .GlobalEnv)
return(model)
}
# diff(df$cetes28, 1)
#
# diff(df$cetes28)
# df
# LINEAR MODEL
iterate_forecast_linear(df, "model", 24)
forecast_1 <- forecast_model
# forecast_intervals
# LINEAR MODEL
modelFn <- function(dataset) {
model <- lm(inflation ~ inflation_lag + inflation_lag12 + inflation_lag24 + expect_t1 + exchange_rate + diff_cetes28, data = dataset)
assign("model", model, envir = .GlobalEnv)
return(model)
}
# diff(df$cetes28, 1)
#
# diff(df$cetes28)
# df
# LINEAR MODEL
iterate_forecast_linear(df, "model", 24)
forecast_1 <- forecast_model
# forecast_intervals
# Plot de la predicción (con intervalos de confianza) y de los datos reales (outSample):
time <- as.Date(outSample$fecha)
# If forecast_1 is a times series, convert it to a data frame with a conditional:
if (is.ts(forecast_1)) {
forecast_1 <- data.frame(time = time, forecast_1)
colnames(forecast_1) <- c("time", "forecast_1")
}
if (is.ts(outSample_observed) | is.vector(outSample_observed)) {
outSample_observed <- data.frame(time = time, outSample_observed)
colnames(outSample_observed) <- c("time", "outSample_observed")
}
if (is.ts(outSample_expected) | is.vector(outSample_expected)) {
outSample_expected <- data.frame(time = time, outSample_expected)
colnames(outSample_expected) <- c("time", "outSample_expected")
}
plot_2 <- ggplot() +
# Predicción:
geom_line(data = forecast_1, aes(x = time, y = forecast_1), color = "orange", linetype = "dashed") +
# Datos observados:
geom_line(data = outSample_observed, aes(x = time, y = outSample_observed), color = "black") +
# Expectativa de los datos observados:
# geom_line(data = outSample_expected, aes(x = time, y = outSample_expected), color = "darkgray", linetype = "dashed") +
# Intervalos de confianza:
geom_ribbon(data = forecast_intervals, aes(x = time, ymin = forecast_intervals$forecast_Li, ymax = forecast_intervals$forecast_Ui), fill = "blue", alpha = 0.1) +
# Título y ejes:
# labs(title = "ARIMA(0,1,3) + expectativas de inflación frente a la inflación observada",
labs(title = "ARIMA(3,0,1) frente a la inflación observada",
x = "Fecha", y = "Inflación mensual") +
# Línea en y = 0:
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
# Put the legend at the bottom:
# theme(legend.position = "bottom") +
# Otras cosas:
# Forecastito (cuatro valores):
# geom_line(data = forecastito, aes(x = forecastito_time, y = forecastito), color = "darkgreen", linetype = "dashed") +
# X ticks mensuales y rotados 90 grados:
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# theme_minimal()
# pdf saved and opened:
ggsave("arima(3,0,1)_VS_observed.pdf", plot_2, width = 10, height = 6)
# ggsave("expected_vs_observed.pdf", plot_2, width = 10, height = 6)
plot_2
